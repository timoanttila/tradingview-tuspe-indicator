//@version=5
indicator("Tuspe Special Mix", shorttitle="Tuspe", overlay=true, dynamic_requests=true)

isClosed = barstate.isconfirmed
fullSize = high - low
prevHigh = high[1]
prevLow = low[1]
prevFullSize = prevHigh - prevLow

// ----------
//  Displacement
// ----------

// Displacement Indicator Logic
rangeType = input.string("Open to Close", "Range Type", options = ['Open to Close', 'High to Low'], group="Displacement")
devPeriod = input.int(100, minval = 1, title = "Deviation Period", group="Displacement")
devMultiplier = input.int(3, minval = 0, title = "Deviation Multiplier", group="Displacement")

priceRange = rangeType == "Open to Close" ? math.abs(open - close) : high - low
rangeDeviation = ta.stdev(priceRange, devPeriod) * devMultiplier

priceGap = close[1] > open[1] ? high[2] < low[0] : low[2] > high[0]
isDisplaced = priceRange[1] > rangeDeviation[1] and priceGap

barcolor(isDisplaced ? color.maroon : na, offset = -1, title="Displacement Highlight Color")
alertcondition(isDisplaced, title="Elephant Bar", message="New Displacement / Elephant Bar detected!")

// ----------
//  Inside Bar
// ----------

isInsideBar = isClosed and not isDisplaced and fullSize < prevFullSize and prevHigh > high and prevLow < low
barcolor(isInsideBar ? color.yellow : na, title="Inside Bar")
alertcondition(isInsideBar, title="Inside Bar", message="New Inside Bar detected!")
alertcondition(isInsideBar or isDisplaced, title="Elephant or Inside Bar", message="New interesting bar detected!")

// ----------
//  Outside Bar
// ----------

isOutsideBar = isClosed and not isDisplaced and not isInsideBar and fullSize > prevFullSize and prevHigh < high and prevLow > low
barcolor(isOutsideBar ? color.fuchsia : na, title="Outside Bar")
alertcondition(isOutsideBar, title="Outside Bar", message="New Outside Bar detected!")

// ----------
//  Moving Averages
// ----------

// Moving Average Calculation Function
ma(source, length, type) =>
    switch type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
        "SMMA (RMA)" => ta.rma(source, length)
        "WMA" => ta.wma(source, length)
        "VWMA" => ta.vwma(source, length)

// Inputs for the Moving Averages
maType = input.string(title="MA Type", defval="SMA", options=["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group="Moving Averages")
maOffset = input.int(title="MA Offset", defval=0, minval=-500, maxval=500, group="Moving Averages")
maLen1 = input.int(title="MA1 Length", defval=8, minval=1, group="Moving Averages")
maLen2 = input.int(title="MA2 Length", defval=20, minval=1, group="Moving Averages")
maLen3 = input.int(title="MA3 Length", defval=50, minval=1, group="Moving Averages")

// Plot the Moving Averages
plot(ma(close, maLen1, maType), title="MA1", color=color.orange, linewidth=1, offset=maOffset)
plot(ma(close, maLen2, maType), title="MA2", color=color.yellow, linewidth=2, offset=maOffset)
plot(ma(close, maLen3, maType), title="MA3", color=color.aqua, linewidth=2, offset=maOffset)

//------------------
// Previous day high/low
//------------------

showPdhl = input(true, "Show previous day high and low", group = "Daily Highs & Lows")

hl() => [high, low]

phl(h, l, tf, css)=>
    var line highLine = line.new(na, na, na, na, xloc = xloc.bar_time, color = css, style = line.style_solid)
    var label highLbl = label.new(na, na, xloc = xloc.bar_time, text = str.format('P{0}H', tf), color = color.new(color.white, 100), textcolor = css, size = size.small, style = label.style_label_left)
    var line lowLine = line.new(na, na, na, na, xloc = xloc.bar_time, color = css, style = line.style_solid)
    var label lowLbl = label.new(na, na, xloc = xloc.bar_time, text = str.format('P{0}L', tf), color = color.new(color.white, 100), textcolor = css, size = size.small, style = label.style_label_left)

    hy = ta.valuewhen(h != h[1], h, 1)
    hx = ta.valuewhen(h == high, time, 1)

    ly = ta.valuewhen(l != l[1], l, 1)
    lx = ta.valuewhen(l == low, time, 1)

    if barstate.islast
        ext = time + (time - time[1]) * 2

        // High
        line.set_xy1(highLine, hx, hy)
        line.set_xy2(highLine, ext, hy)
        label.set_xy(highLbl, ext, hy)

        // Low
        line.set_xy1(lowLine, lx, ly)
        line.set_xy2(lowLine, ext, ly)
        label.set_xy(lowLbl, ext, ly)

[pdh, pdl] = request.security(syminfo.tickerid, 'D', hl(), lookahead = barmerge.lookahead_on)
pdhl_css = input.color(color.new(color.green, 40), "Previous Day Line Color", group = "Highs & Lows")

// Fetch high and low for the previous day
var float prevDayHigh = na
var float prevDayLow = na

if (dayofweek(time) != dayofweek(time[1]))
    prevDayHigh := pdh
    prevDayLow := pdl

// Display Daily
if showPdhl
    phl(prevDayHigh, prevDayLow, 'D', pdhl_css)

// Input for user-defined zone in cents
zoneWidthCents = input(50, title="Zone width (in cents)", group="Highs & Lows") / 100

// Calculate zones based on PDH and PDL
pdhZoneHigh = prevDayHigh - zoneWidthCents
pdlZoneLow = prevDayLow + zoneWidthCents

// Check if the close or wick is within the PDH or PDL zone, or crosses over PDH or under PDL
inPdhZone = high >= prevDayHigh or high > pdhZoneHigh
inPdlZone = low <= prevDayLow and low <= pdlZoneLow

// Alerts for PDH and PDL zones and wick crossing above or below
alertcondition(inPdhZone, title="Previous day high", message="Price is near or above the previous day high (PDH)")
alertcondition(inPdlZone, title="Previous day low", message="Price is near or below the previous day low (PDL)")
alertcondition(inPdhZone or inPdlZone, title="Previous day", message="Price is near the previous day high or low.")